shiny::runApp()
source("server/Render_plotly.R",local = TRUE)$value
output$age_sex_plotly <- renderPlotly({
summary_data <- summary()
if (input$y == "count") {
plot_data <- summary_data %>%
plot_ly(y = ~n, x = ~age, type = "box")
plot_data
} else {
plot_data <- summary_data %>%
plot_ly(y = ~rate, x = ~age, type = "box")
plot_data
}
})
runApp()
runApp()
runApp()
runApp()
print(summary_data)
summary_data
summary()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dashboardBody(
tabItem(
tabName = "TABLES",
tabsetPanel(
tabPanel("TABLES",
box(title="Diagnosed",solidHeader = TRUE,column(4, tableOutput("diag"))),
box(title="Body Part",solidHeader = TRUE,column(4, tableOutput("body_part"))),
box(title="Location",solidHeader = TRUE,column(4,tableOutput("location")))
),
tabPanel("PLOTS",
tabsetPanel(
tabPanel("Ggplot",
fluidRow(
column(4,selectInput("y","Y-axis",c("count","rate")))
),
box(5,title="Plot",column(3,plotOutput("age_sex")))),
tabPanel("Plotly",
fluidRow(
column(4,selectInput("y","Y-axis",c("count","rate")))
),
box(title="Plotly",width=10,column(6, plotOutput("age_sex_plotly")))
)
)
)
)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
output$downloadButton = downloadHandler(
output$downloadButton = downloadHandler(
runApp()
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 10,000)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 10,000)
})
observeEvent(input$act,({
# output$dynamicui=renderUI({
#   textInput("code", "Feedback")
# })
output$button=renderUI({
actionButton("act1","export to PPT")
})
}))
observeEvent(input$report1,({
ppt=read_pptx(
slide_table=ppt%>%
ph_with(
add_slide(layout = "Title and Content",master="Office theme")%>%
selected(),
rmarkdown::markdown_github()
))
}))
observeEvent(input$report2,({
slide_graph=ppt%>%
add_slide(layout="Title and Content",master = "Office Theme")%>%
ph_with_gg(
plot(if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line()+
labs(y = "Estimated number of injuries")+theme_classic()
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")+theme_classic()
}
,res = 96,width=600))
})
)
selected = eventReactive(input$act,{
withProgress(message = "processing", {
for (i in seq_len(input$act)) {
Sys.sleep(0.5)
incProgress(1 / input$act)
}
runif(1)
})
injuries %>% filter(prod_code == input$code)
})
output$downloadButton = downloadHandler(
filename = "table_data.csv",
content = function(file) {
write.csv(summary(), file, row.names = FALSE)
}
)
input$downloadButton = downloadHandler(
filename = "table_data.csv",
content = function(file) {
write.csv(summary(), file, row.names = FALSE)
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
server =function(input, output, session){
source("utils/action_button_event_reactive.R",local = TRUE)$value
source("utils/numeric_afterclick_actionbutton.R",local = TRUE)$value
#source("utils/action_button_event_reactive_2.R",local = TRUE)$value
source("server/Render_tables.R",local = TRUE)$value
#source("server/Download_button.R", local = TRUE)$value
source("utils/report1.R",local=TRUE)$value
#source("server/Render_tables_2.R",local = TRUE)$value
source("utils/reactive_ploting.R",local = TRUE)$value
.
source("server/Render_ggplot.R",local = TRUE)$value
source("utils/report2.R",local = TRUE)$value
source("server/Render_plotly.R",local = TRUE)$value
}
